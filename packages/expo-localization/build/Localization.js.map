{"version":3,"file":"Localization.js","sourceRoot":"","sources":["../src/Localization.ts"],"names":[],"mappings":"AAAA,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAIlD,2FAA2F;AAC3F,yHAAyH;AACzH,MAAM,WAAW,GAAG,CAAC,MAAc,EAAU,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAEzE,0GAA0G;AAC1G,MAAM,CAAC,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;AAC/F,MAAM,CAAC,MAAM,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC;AACxG,MAAM,CAAC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;AAClD,MAAM,CAAC,MAAM,gBAAgB,GAAG,gBAAgB,CAAC,gBAAgB,CAAC;AAClE,MAAM,CAAC,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC,CAAC,WAAW;AAC1D,MAAM,CAAC,MAAM,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC;AAE5C,MAAM,CAAC,KAAK,UAAU,oBAAoB;IACxC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,YAAY,EAAE,GAAG,MAAM,gBAAgB,CAAC,oBAAoB,EAAE,CAAC;IAC3F,OAAO;QACL,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC;QAC3B,OAAO,EAAE,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC;QAClD,GAAG,YAAY;KAChB,CAAC;AACJ,CAAC","sourcesContent":["import ExpoLocalization from './ExpoLocalization';\n\nimport { Localization } from './Localization.types';\n\n// Web, Android, and some iOS values use `-`. This will convert the iOS values that use `_`\n// https://github.com/expo/expo/blob/21ae94bae2e8369992050c433a00699d425b35bd/packages/expo/src/Localization.ts#L112-L114\nconst parseLocale = (locale: string): string => locale.replace('_', '-');\n\n// Checking if ExpoLocalization.locale exists prevents iOS 13 simulator crashes where it may be undefined.\nexport const locale = ExpoLocalization.locale ? parseLocale(ExpoLocalization.locale) : 'en-US';\nexport const locales = ExpoLocalization.locales ? ExpoLocalization.locales.map(parseLocale) : ['en-US'];\nexport const timezone = ExpoLocalization.timezone;\nexport const isoCurrencyCodes = ExpoLocalization.isoCurrencyCodes;\nexport const region = ExpoLocalization.region; // iOS, Web\nexport const isRTL = ExpoLocalization.isRTL;\n\nexport async function getLocalizationAsync(): Promise<Localization> {\n  const { locale, locales, ...localization } = await ExpoLocalization.getLocalizationAsync();\n  return {\n    locale: parseLocale(locale),\n    locales: ExpoLocalization.locales.map(parseLocale),\n    ...localization,\n  };\n}\n"]}